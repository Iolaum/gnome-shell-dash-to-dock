From b2cce310318af03151b3c15c5323403b792c7a74 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Fri, 13 Mar 2020 19:06:05 +0100
Subject: [PATCH 15/36] docking: Properly replace default dash in all modes

As per 3.36, the dash is accessible via Main.overview.dash although this is
a getter for a property that is set only in case we are not in dummy mode,
and so if the overview actor is defined.

So, to simplify the management, replace the overview's 'dash' property with
a dynamic getter that just returns the default value or our main dash
depending on the overview mode.
As per this we also need to toggle d2d in case the session mode changes.

Remove references to Main.overview._dash as in the current codebase is just
a dead-property.

Finally, always restore stock dash before destroying our dash to avoid we
could ever access to a dead actor.

Fixes LP: #1795703, LP: #1865865
Fixes #1121
---
 appIcons.js |  2 +-
 docking.js  | 53 ++++++++++++++++++++++++++++++++++++++---------------
 2 files changed, 39 insertions(+), 16 deletions(-)

diff --git a/appIcons.js b/appIcons.js
index 6f958a3..2ddb245 100644
--- a/appIcons.js
+++ b/appIcons.js
@@ -310,7 +310,7 @@ class MyAppIcon extends Dash.DashIcon {
                                            position == St.Side.BOTTOM);
                     // If horizontal also remove the height of the dash
                     let fixedDock = Docking.DockManager.settings.get_boolean('dock-fixed');
-                    let additional_margin = this._isHorizontal && !fixedDock ? Main.overview._dash.height : 0;
+                    let additional_margin = this._isHorizontal && !fixedDock ? Main.overview.dash.height : 0;
                     let verticalMargins = this._menu.actor.margin_top + this._menu.actor.margin_bottom;
                     // Also set a max width to the menu, so long labels (long windows title) get truncated
                     this._menu.actor.style = ('max-height: ' + Math.round(workArea.height - additional_margin - verticalMargins) + 'px;' +
diff --git a/docking.js b/docking.js
index a40de00..ab4be65 100644
--- a/docking.js
+++ b/docking.js
@@ -1584,7 +1584,8 @@ var DockManager = class DashToDock_DockManager {
 
         this._remoteModel = new LauncherAPI.LauncherEntryRemoteModel();
         this._settings = ExtensionUtils.getSettings('org.gnome.shell.extensions.dash-to-dock');
-        this._oldDash = Main.overview._dash;
+        this._oldDash = Main.overview.isDummy ? null : Main.overview.dash;
+
         this._ensureFileManagerClient();
 
         /* Array of all the docks created */
@@ -1626,6 +1627,7 @@ var DockManager = class DashToDock_DockManager {
     }
 
     _toggle() {
+        this._restoreDash();
         this._deleteDocks();
         this._createDocks();
         this.emit('toggled');
@@ -1638,6 +1640,10 @@ var DockManager = class DashToDock_DockManager {
             Meta.MonitorManager.get(),
             'monitors-changed',
             this._toggle.bind(this)
+        ], [
+            Main.sessionMode,
+            'updated',
+            this._toggle.bind(this)
         ], [
             this._settings,
             'changed::multi-monitor',
@@ -1703,7 +1709,7 @@ var DockManager = class DashToDock_DockManager {
         // connect app icon into the view selector
         dock.dash.showAppsButton.connect('notify::checked', this._onShowAppsButtonToggled.bind(this));
 
-        // Make the necessary changes to Main.overview._dash
+        // Make the necessary changes to Main.overview.dash
         this._prepareMainDash();
 
         // Adjust corners if necessary
@@ -1728,18 +1734,23 @@ var DockManager = class DashToDock_DockManager {
     }
 
     _prepareMainDash() {
-        // Pretend I'm the dash: meant to make appgrd swarm animation come from the
-        // right position of the appShowButton.
-        Main.overview._dash = this._allDocks[0].dash;
-
-        // set stored icon size  to the new dash
-        Main.overview.dash.iconSize = this._allDocks[0].dash.iconSize;
+        // Ensure Main.overview.dash is set to our dash in dummy mode
+        // while just use the default getter otherwise.
+        // The getter must be dynamic and not set only when we've a dummy
+        // overview because the mode can change dynamically.
+        let defaultDashGetter = Object.getOwnPropertyDescriptor(
+            Main.overview.constructor.prototype, 'dash').get;
+        Object.defineProperty(Main.overview, 'dash', {
+            configurable: true,
+            get: () => Main.overview.isDummy ?
+                this._allDocks[0].dash : defaultDashGetter.call(Main.overview),
+        });
 
         if (Main.overview.isDummy)
             return;
 
         // Hide usual Dash
-        Main.overview.dash.hide();
+        this._oldDash.hide();
 
         // Also set dash width to 1, so it's almost not taken into account by code
         // calculaing the reserved space in the overview. The reason to keep it at 1 is
@@ -1747,10 +1758,17 @@ var DockManager = class DashToDock_DockManager {
         // in turn is triggergin the appsIcon spring animation, required when no other
         // actors has this effect, i.e in horizontal mode and without the workspaceThumnails
         // 1 static workspace only)
-        Main.overview.dash.set_width(1);
+        this._oldDash.set_width(1);
+
+        // Pretend I'm the dash: meant to make appgrid swarm animation come from
+        // the right position of the appShowButton.
+        Main.overview._overview._controls.dash = this._allDocks[0].dash;
     }
 
     _deleteDocks() {
+        if (!this._allDocks.length)
+            return;
+
         // Remove extra features
         this._workspaceIsolation.destroy();
         this._keyboardShortcuts.destroy();
@@ -1764,8 +1782,14 @@ var DockManager = class DashToDock_DockManager {
     }
 
     _restoreDash() {
-        if (Main.overview.isDummy)
-            return;
+        Object.defineProperty(Main.overview, 'dash',
+            Object.getOwnPropertyDescriptor(
+                Main.overview.constructor.prototype, 'dash'));
+
+        if (!this._oldDash)
+                return;
+
+        Main.overview._overview._controls.dash = this._oldDash;
 
         Main.overview.dash.show();
         Main.overview.dash.set_width(-1); //reset default dash size
@@ -1774,8 +1798,6 @@ var DockManager = class DashToDock_DockManager {
 
         // reset stored icon size  to the default dash
         Main.overview.dash.iconSize = Main.overview.dash.iconSize;
-
-        Main.overview._dash = this._oldDash;
     }
 
     _onShowAppsButtonToggled(button) {
@@ -1879,9 +1901,9 @@ var DockManager = class DashToDock_DockManager {
 
     destroy() {
         this._signalsHandler.destroy();
+        this._restoreDash();
         this._deleteDocks();
         this._revertPanelCorners();
-        this._restoreDash();
         if (this._fm1Client) {
             this._fm1Client.destroy();
             this._fm1Client = null;
@@ -1889,6 +1911,7 @@ var DockManager = class DashToDock_DockManager {
         this._remoteModel.destroy();
         this._settings.run_dispose();
         this._settings = null;
+        this._oldDash = null;
 
         Me.imports.extension.dockManager = null;
     }
-- 
2.25.1

